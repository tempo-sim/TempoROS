// Copyright Tempo Simulation, LLC. All Rights Reserved

/* This file was generated by a TempoROS prebuild step and should not be modified. */

#pragma once

#include "TempoROSCommonConverters.h"

#include "TempoROSNode.h"

#include "TempoROSTypes.h"

#include "Kismet/BlueprintFunctionLibrary.h"

#include "TempoROSTempoROSBlueprintFunctionLibrary.generated.h"

DECLARE_DYNAMIC_DELEGATE_OneParam(FTempoROSStringReceived, FString, Value);

DECLARE_DYNAMIC_DELEGATE_OneParam(FTempoROSVectorReceived, FVector, Value);

DECLARE_DYNAMIC_DELEGATE_OneParam(FTempoROSRotatorReceived, FRotator, Value);

DECLARE_DYNAMIC_DELEGATE_OneParam(FTempoROSTransformReceived, FTransform, Value);

DECLARE_DYNAMIC_DELEGATE_OneParam(FTempoROSTwistReceived, FTwist, Value);

UCLASS(BlueprintType)
class TEMPOROS_API UTempoROSTempoROSBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

    UFUNCTION(BlueprintCallable, Category = "TempoROS", meta=(AutoCreateRefTerm="QOSProfile"))
    static void AddStringPublisher(UTempoROSNode* Node, const FString& Topic, const FROSQOSProfile& QOSProfile=FROSQOSProfile(), bool bPrependNodeName=true)
    {
        Node->AddPublisher<FString>(Topic, QOSProfile, bPrependNodeName);
    }

    UFUNCTION(BlueprintCallable, Category = "TempoROS")
    static void PublishString(UTempoROSNode* Node, const FString& Topic, const FString& Message)
    {
        Node->Publish<FString>(Topic, Message);
    }

    UFUNCTION(BlueprintCallable, Category = "TempoROS", meta=(AutoCreateRefTerm="QOSProfile"))
    static void AddVectorPublisher(UTempoROSNode* Node, const FString& Topic, const FROSQOSProfile& QOSProfile=FROSQOSProfile(), bool bPrependNodeName=true)
    {
        Node->AddPublisher<FVector>(Topic, QOSProfile, bPrependNodeName);
    }

    UFUNCTION(BlueprintCallable, Category = "TempoROS")
    static void PublishVector(UTempoROSNode* Node, const FString& Topic, const FVector& Message)
    {
        Node->Publish<FVector>(Topic, Message);
    }

    UFUNCTION(BlueprintCallable, Category = "TempoROS", meta=(AutoCreateRefTerm="QOSProfile"))
    static void AddRotatorPublisher(UTempoROSNode* Node, const FString& Topic, const FROSQOSProfile& QOSProfile=FROSQOSProfile(), bool bPrependNodeName=true)
    {
        Node->AddPublisher<FRotator>(Topic, QOSProfile, bPrependNodeName);
    }

    UFUNCTION(BlueprintCallable, Category = "TempoROS")
    static void PublishRotator(UTempoROSNode* Node, const FString& Topic, const FRotator& Message)
    {
        Node->Publish<FRotator>(Topic, Message);
    }

    UFUNCTION(BlueprintCallable, Category = "TempoROS", meta=(AutoCreateRefTerm="QOSProfile"))
    static void AddTransformPublisher(UTempoROSNode* Node, const FString& Topic, const FROSQOSProfile& QOSProfile=FROSQOSProfile(), bool bPrependNodeName=true)
    {
        Node->AddPublisher<FTransform>(Topic, QOSProfile, bPrependNodeName);
    }

    UFUNCTION(BlueprintCallable, Category = "TempoROS")
    static void PublishTransform(UTempoROSNode* Node, const FString& Topic, const FTransform& Message)
    {
        Node->Publish<FTransform>(Topic, Message);
    }

    UFUNCTION(BlueprintCallable, Category = TempoROS)
    static void AddStringSubscription(UTempoROSNode* Node, const FString& Topic, const FTempoROSStringReceived& TempoROSMessageReceivedEvent)
    {
        Node->AddSubscription<FString>(Topic, TROSSubscriptionDelegate<FString>::CreateLambda([TempoROSMessageReceivedEvent](const FString& Value)
        {
            TempoROSMessageReceivedEvent.ExecuteIfBound(Value);
        }));
    }

    UFUNCTION(BlueprintCallable, Category = TempoROS)
    static void AddVectorSubscription(UTempoROSNode* Node, const FString& Topic, const FTempoROSVectorReceived& TempoROSMessageReceivedEvent)
    {
        Node->AddSubscription<FVector>(Topic, TROSSubscriptionDelegate<FVector>::CreateLambda([TempoROSMessageReceivedEvent](const FVector& Value)
        {
            TempoROSMessageReceivedEvent.ExecuteIfBound(Value);
        }));
    }

    UFUNCTION(BlueprintCallable, Category = TempoROS)
    static void AddRotatorSubscription(UTempoROSNode* Node, const FString& Topic, const FTempoROSRotatorReceived& TempoROSMessageReceivedEvent)
    {
        Node->AddSubscription<FRotator>(Topic, TROSSubscriptionDelegate<FRotator>::CreateLambda([TempoROSMessageReceivedEvent](const FRotator& Value)
        {
            TempoROSMessageReceivedEvent.ExecuteIfBound(Value);
        }));
    }

    UFUNCTION(BlueprintCallable, Category = TempoROS)
    static void AddTransformSubscription(UTempoROSNode* Node, const FString& Topic, const FTempoROSTransformReceived& TempoROSMessageReceivedEvent)
    {
        Node->AddSubscription<FTransform>(Topic, TROSSubscriptionDelegate<FTransform>::CreateLambda([TempoROSMessageReceivedEvent](const FTransform& Value)
        {
            TempoROSMessageReceivedEvent.ExecuteIfBound(Value);
        }));
    }

    UFUNCTION(BlueprintCallable, Category = TempoROS)
    static void AddTwistSubscription(UTempoROSNode* Node, const FString& Topic, const FTempoROSTwistReceived& TempoROSMessageReceivedEvent)
    {
        Node->AddSubscription<FTwist>(Topic, TROSSubscriptionDelegate<FTwist>::CreateLambda([TempoROSMessageReceivedEvent](const FTwist& Value)
        {
            TempoROSMessageReceivedEvent.ExecuteIfBound(Value);
        }));
    }
};
